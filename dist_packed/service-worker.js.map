{"version":3,"file":"./service-worker.js","mappings":"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","sources":["webpack://@maplat/ui/./node_modules/workbox-core/_version.js","webpack://@maplat/ui/./node_modules/workbox-expiration/_version.js","webpack://@maplat/ui/./node_modules/workbox-precaching/_version.js","webpack://@maplat/ui/./node_modules/workbox-routing/_version.js","webpack://@maplat/ui/./node_modules/workbox-strategies/_version.js","webpack://@maplat/ui/webpack/bootstrap","webpack://@maplat/ui/./node_modules/workbox-core/_private/logger.js","webpack://@maplat/ui/./node_modules/workbox-core/models/messages/messageGenerator.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/WorkboxError.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/assert.js","webpack://@maplat/ui/./node_modules/workbox-core/models/quotaErrorCallbacks.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/cacheNames.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/canConstructReadableStream.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/dontWaitFor.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/Deferred.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/getFriendlyURL.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/waitUntil.js","webpack://@maplat/ui/./node_modules/workbox-core/copyResponse.js","webpack://@maplat/ui/./node_modules/workbox-precaching/utils/createCacheKey.js","webpack://@maplat/ui/./node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","webpack://@maplat/ui/./node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","webpack://@maplat/ui/./node_modules/workbox-strategies/StrategyHandler.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/timeout.js","webpack://@maplat/ui/./node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","webpack://@maplat/ui/./node_modules/workbox-strategies/Strategy.js","webpack://@maplat/ui/./node_modules/workbox-precaching/PrecacheStrategy.js","webpack://@maplat/ui/./node_modules/workbox-precaching/PrecacheController.js","webpack://@maplat/ui/./node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","webpack://@maplat/ui/./node_modules/workbox-routing/utils/constants.js","webpack://@maplat/ui/./node_modules/workbox-routing/utils/normalizeHandler.js","webpack://@maplat/ui/./node_modules/workbox-routing/Route.js","webpack://@maplat/ui/./node_modules/workbox-routing/RegExpRoute.js","webpack://@maplat/ui/./node_modules/workbox-routing/Router.js","webpack://@maplat/ui/./node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","webpack://@maplat/ui/./node_modules/workbox-routing/registerRoute.js","webpack://@maplat/ui/./node_modules/workbox-precaching/PrecacheRoute.js","webpack://@maplat/ui/./node_modules/workbox-precaching/utils/generateURLVariations.js","webpack://@maplat/ui/./node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","webpack://@maplat/ui/./node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","webpack://@maplat/ui/./node_modules/idb/build/wrap-idb-value.js","webpack://@maplat/ui/./node_modules/idb/build/index.js","webpack://@maplat/ui/./node_modules/workbox-expiration/models/CacheTimestampsModel.js","webpack://@maplat/ui/./node_modules/workbox-expiration/CacheExpiration.js","webpack://@maplat/ui/./node_modules/workbox-precaching/precacheAndRoute.js","webpack://@maplat/ui/./node_modules/weiwudi/src/weiwudi_gw_logic.js","webpack://@maplat/ui/./node_modules/weiwudi/src/weiwudi_gw.js","webpack://@maplat/ui/./node_modules/workbox-core/skipWaiting.js","webpack://@maplat/ui/./node_modules/workbox-core/clientsClaim.js","webpack://@maplat/ui/./src/service-worker.js","webpack://@maplat/ui/./node_modules/workbox-precaching/precache.js","webpack://@maplat/ui/./node_modules/workbox-precaching/addRoute.js","webpack://@maplat/ui/./node_modules/workbox-strategies/StaleWhileRevalidate.js","webpack://@maplat/ui/./node_modules/workbox-expiration/ExpirationPlugin.js","webpack://@maplat/ui/./node_modules/workbox-core/registerQuotaErrorCallback.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.5.4'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:6.5.4'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.5.4'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.5.4'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.4'] && _();\n}\ncatch (e) { }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream)\n * object.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `ReadableStream`, `false` otherwise.\n *\n * @private\n */\nfunction canConstructReadableStream() {\n    if (supportStatus === undefined) {\n        // See https://github.com/GoogleChrome/workbox/issues/1473\n        try {\n            new ReadableStream({ start() { } });\n            supportStatus = true;\n        }\n        catch (error) {\n            supportStatus = false;\n        }\n    }\n    return supportStatus;\n}\nexport { canConstructReadableStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","export function Weiwudi_Internal(registerRoute){\r\n  \"use strict\";\r\n  const MERC_MAX = 20037508.342789244;\r\n  const dbCache = {};\r\n  let fetchAllBlocker;\r\n  const extractTemplate = (template, z, x, y) => {\r\n    const result = template.replace('{z}', z)\r\n      .replace('{x}', x)\r\n      .replace('{y}', y)\r\n      .replace('{-y}', Math.pow(2, z) - y - 1);\r\n    return result;\r\n  };\r\n  const b64toBlob = (b64Data, contentType='', sliceSize=512) => {\r\n    const byteCharacters = atob(b64Data);\r\n    const byteArrays = [];\r\n\r\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n      const byteNumbers = new Array(slice.length);\r\n      for (let i = 0; i < slice.length; i++) {\r\n        byteNumbers[i] = slice.charCodeAt(i);\r\n      }\r\n\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      byteArrays.push(byteArray);\r\n    }\r\n\r\n    const blob = new Blob(byteArrays, {type: contentType});\r\n    return blob;\r\n  };\r\n  const getDB = async (dbname, table, key) => {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        if (dbCache[dbname]) resolve(dbCache[dbname]);\r\n        else {\r\n          const openDB = indexedDB.open(dbname);\r\n          openDB.onupgradeneeded = function (event) {\r\n            const db = event.target.result;\r\n            db.createObjectStore(table, {keyPath: key});\r\n          };\r\n          openDB.onsuccess = function (event) {\r\n            const db = event.target.result;\r\n            dbCache[dbname] = db;\r\n            resolve(db);\r\n          };\r\n          openDB.onerror = function (error) {\r\n            reject(error);\r\n          };\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  };\r\n  const deleteDB = async (dbname) => {\r\n    if (dbCache[dbname]) {\r\n      const db = dbCache[dbname];\r\n      db.close();\r\n      delete dbCache[dbname];\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const deleteReq = indexedDB.deleteDatabase(dbname);\r\n\r\n        deleteReq.onsuccess = async (event) => {\r\n          resolve();\r\n        };\r\n        deleteReq.onerror = function (error) {\r\n          reject(error);\r\n        };\r\n      } catch(e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  };\r\n  const cleanDB = async (db, table) => {\r\n    return new Promise((resolve, reject) => {\r\n      const tx = db.transaction([table], 'readwrite');\r\n      const store = tx.objectStore(table);\r\n      const clearReq = store.clear();\r\n      clearReq.onsuccess = function(e) {\r\n      };\r\n      clearReq.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.oncomplete = function(e) {\r\n        resolve();\r\n      };\r\n      tx.onabort = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n    });\r\n  };\r\n  const countDB = async (db, table) => {\r\n    return new Promise((resolve, reject) => {\r\n      const tx = db.transaction([table], 'readonly');\r\n      const store = tx.objectStore(table);\r\n      const cursorReq = store.openCursor();\r\n      let count = 0;\r\n      let size = 0;\r\n      cursorReq.onsuccess = function(e) {\r\n        const cursor = cursorReq.result;\r\n        if (cursor) {\r\n          count++;\r\n          size = size + cursor.value.blob.size;\r\n          cursor.continue();\r\n        }\r\n      };\r\n      cursorReq.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.oncomplete = function(e) {\r\n        resolve({\r\n          count: count,\r\n          size: size\r\n        });\r\n      };\r\n      tx.onabort = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n    });\r\n  };\r\n  const getItem = async (db, table, key, dry) => {\r\n    return new Promise((resolve, reject) => {\r\n      const tx = db.transaction([table], 'readonly');\r\n      const store = tx.objectStore(table);\r\n      const getReq = dry ? store.getKey(key) : store.get(key);\r\n      getReq.onsuccess = function(e) {\r\n      };\r\n      getReq.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.oncomplete = function(e) {\r\n        resolve(getReq.result);\r\n      };\r\n      tx.onabort = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n    });\r\n  };\r\n  const putItem = async (db, table, item) => {\r\n    return new Promise((resolve, reject) => {\r\n      const tx = db.transaction([table], 'readwrite');\r\n      const store = tx.objectStore(table);\r\n      const putReq = store.put(item);\r\n      putReq.onsuccess = function(e) {\r\n      };\r\n      putReq.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.oncomplete = function(e) {\r\n        resolve();\r\n      };\r\n      tx.onabort = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n    });\r\n  };\r\n  const deleteItem = async (db, table, key) => {\r\n    return new Promise((resolve, reject) => {\r\n      const tx = db.transaction([table], 'readwrite');\r\n      const store = tx.objectStore(table);\r\n      const delReq = store.delete(key);\r\n      delReq.onsuccess = function(e) {\r\n      };\r\n      delReq.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.oncomplete = function(e) {\r\n        resolve();\r\n      };\r\n      tx.onabort = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n    });\r\n  };\r\n  const getAllKeys = async (db, table) => {\r\n    return new Promise((resolve, reject) => {\r\n      const tx = db.transaction([table], 'readwrite');\r\n      const store = tx.objectStore(table);\r\n      const getReq = store.getAllKeys();\r\n      getReq.onsuccess = function(e) {\r\n      };\r\n      getReq.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.oncomplete = function(e) {\r\n        resolve(getReq.result);\r\n      };\r\n      tx.onabort = function(e) {\r\n        reject(e);\r\n      };\r\n      tx.onerror = function(e) {\r\n        reject(e);\r\n      };\r\n    });\r\n  };\r\n  const handlerCb = async ({url, request, event, params}) => {\r\n    const client = event.clientId ? await self.clients.get(event.clientId) : undefined;\r\n    const matched = url.pathname.match(/^\\/api\\/([\\w\\d]+)(?:\\/(.+))?$/);\r\n    if (matched) {\r\n      const query = [...url.searchParams.entries()].reduce((obj, e) => {\r\n        const values = url.searchParams.getAll(e[0]);\r\n        if (values.length === 1) obj[e[0]] = values[0];\r\n        else obj[e[0]] = values;\r\n        return obj;\r\n      }, {});\r\n      const apiName = matched[1];\r\n      const restPath = matched[2];\r\n      let res = await apiFunc(apiName, query, restPath, client);\r\n      if (res) {\r\n        if (!(res instanceof Response)) res = new Response(res);\r\n        return res;\r\n      }\r\n    }\r\n  };\r\n  const getImage = async (mapID, z, x, y, noOutput) => {\r\n    let outExtent;\r\n    const db = await getDB('Weiwudi');\r\n    const setting = await getItem(db, 'mapSetting', mapID);\r\n    if (!noOutput) {\r\n      if (!setting) return `Error: MapID \"${mapID}\" not found`;\r\n      if (z < setting.minZoom || z > setting.maxZoom) outExtent = 'zoom';\r\n      else {\r\n        const minXatZ = Math.floor(setting.minX / Math.pow(2, setting.maxZoom - z));\r\n        const maxXatZ = Math.floor(setting.maxX / Math.pow(2, setting.maxZoom - z));\r\n        const minYatZ = Math.floor(setting.minY / Math.pow(2, setting.maxZoom - z));\r\n        const maxYatZ = Math.floor(setting.maxY / Math.pow(2, setting.maxZoom - z));\r\n        if (x < minXatZ || x > maxXatZ || y < minYatZ || y > maxYatZ) outExtent = 'extent';\r\n      }\r\n    }\r\n    let headers = {};\r\n    let blob;\r\n    let status = 200;\r\n    let statusText = 'OK';\r\n    if (outExtent) {\r\n      if (outExtent === 'zoom') {\r\n        status = 404;\r\n        statusText = 'Not Found';\r\n      } else {\r\n        headers = {\r\n          'content-type': 'image/png'\r\n        };\r\n        blob = b64toBlob('iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAMAAABrrFhUAAAAB3RJTUUH3QgIBToaSbAjlwAAABd0'+\r\n          'RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FN'+\r\n          'QQAAsY8L/GEFAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAFRJREFUeNrtwQEBAAAAgJD+'+\r\n          'r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'+\r\n          'AAAAAAAAAAAAABgBDwABHHIJwwAAAABJRU5ErkJggg==', headers['content-type']);\r\n      }\r\n    } else {\r\n      const cacheDB = await getDB(`Weiwudi_${mapID}`);\r\n      const cached = await getItem(cacheDB, 'tileCache', `${z}_${x}_${y}`, noOutput);\r\n      const nowEpoch = new Date().getTime();\r\n      if (!cached || !cached.epoch || nowEpoch - cached.epoch > 86400000) {\r\n        const template = setting.url instanceof Array ?\r\n          setting.url[Math.floor(Math.random() * setting.url.length)] :\r\n          setting.url;\r\n        const url = extractTemplate(template, z, x, y);\r\n        try {\r\n          const resp = await fetch(url);\r\n          if (resp.ok) {\r\n            headers = [...resp.headers.entries()].reduce((obj, e) => ({...obj, [e[0]]: e[1]}), {});\r\n            blob = await resp.blob();\r\n            await putItem(cacheDB, 'tileCache', {\r\n              'z_x_y': `${z}_${x}_${y}`,\r\n              headers: headers,\r\n              blob: blob,\r\n              epoch: nowEpoch\r\n            });\r\n          } else {\r\n            if (cached) {\r\n              headers = cached.headers;\r\n              blob = cached.blob;\r\n            } else {\r\n              status = resp.status;\r\n              statusText = resp.statusText;\r\n              headers = [...resp.headers.entries()].reduce((obj, e) => ({...obj, [e[0]]: e[1]}), {});\r\n              blob = await resp.blob();\r\n            }\r\n            if (fetchAllBlocker) fetchAllBlocker.error++;\r\n          }\r\n        } catch(e) {\r\n          if (cached) {\r\n            headers = cached.headers;\r\n            blob = cached.blob;\r\n          } else {\r\n            status = 404;\r\n            statusText = 'Not Found';\r\n          }\r\n          if (fetchAllBlocker) fetchAllBlocker.error++;\r\n        }\r\n      } else if (!noOutput) {\r\n        headers = cached.headers;\r\n        blob = cached.blob;\r\n      }\r\n    }\r\n    return noOutput ? undefined : new Response(blob, {\r\n      status,\r\n      statusText,\r\n      headers: new Headers(headers)\r\n    });\r\n  };\r\n  const fetchAll = async (client, setting) => {\r\n    let processed = 0;\r\n    let error = 0;\r\n    let percent = 0;\r\n    const db = await getDB(`Weiwudi_${setting.mapID}`);\r\n    const allKeys = await getAllKeys(db, 'tileCache');\r\n    try {\r\n      const allTasks = [];\r\n      for (let z = setting.minZoom; z <= setting.maxZoom; z++) {\r\n        const maxXatZ = Math.floor(setting.maxX / Math.pow(2, setting.maxZoom - z));\r\n        const minXatZ = Math.floor(setting.minX / Math.pow(2, setting.maxZoom - z));\r\n        const maxYatZ = Math.floor(setting.maxY / Math.pow(2, setting.maxZoom - z));\r\n        const minYatZ = Math.floor(setting.minY / Math.pow(2, setting.maxZoom - z));\r\n        for (let x = minXatZ; x <= maxXatZ; x++) {\r\n          for (let y = minYatZ; y <= maxYatZ; y++) {\r\n            allTasks.push([z, x, y]);\r\n          }\r\n        }\r\n      }\r\n      if (allTasks.length != setting.totalTile) console.log('Number of tiles is different');\r\n      let subTasks = allTasks.splice(0, 5);\r\n      while (subTasks.length) {\r\n        //Alive check\r\n        const checkClient = await self.clients.get(client.id);\r\n        if (!checkClient) {\r\n          fetchAllBlocker = undefined;\r\n          return;\r\n        }\r\n        if (fetchAllBlocker.cancel) {\r\n          fetchAllBlocker = undefined;\r\n          client.postMessage({\r\n            type: 'canceled',\r\n            message: `Fetching tile of ${setting.mapID} is canceled`,\r\n            mapID: setting.mapID\r\n          });\r\n          return;\r\n        }\r\n        const promises = subTasks.map((task) => {\r\n          if (allKeys.indexOf(`${task[0]}_${task[1]}_${task[2]}`) >= 0) return;\r\n          return getImage(setting.mapID, task[0], task[1], task[2], true);\r\n        });\r\n        await Promise.all(promises);\r\n        processed += promises.length;\r\n        fetchAllBlocker.count = processed;\r\n        percent = Math.floor(processed * 100 / setting.totalTile);\r\n        client.postMessage({\r\n          type: 'proceed',\r\n          message: `Proceeding the tile fetching: ${setting.mapID} ${percent}% (${processed} / ${setting.totalTile})`,\r\n          percent,\r\n          processed,\r\n          error: fetchAllBlocker.error,\r\n          total: setting.totalTile,\r\n          mapID: setting.mapID\r\n        });\r\n        subTasks = allTasks.splice(0, 5);\r\n      }\r\n      const error = fetchAllBlocker.error;\r\n      fetchAllBlocker = undefined;\r\n      client.postMessage({\r\n        type: 'finish',\r\n        message: `Fetched all tiles of ${setting.mapID}${error ? ` with ${error} error cases` : ''}`,\r\n        total: setting.totalTile,\r\n        mapID: setting.mapID,\r\n        error\r\n      });\r\n    } catch(e) {\r\n      fetchAllBlocker = undefined;\r\n      client.postMessage({\r\n        type: 'stop',\r\n        message: `Fetching stopped: ${setting.mapID} ${processed} / ${setting.totalTile}`,\r\n        reason: e,\r\n        processed,\r\n        total: setting.totalTile,\r\n        mapID: setting.mapID\r\n      });\r\n    }\r\n  }\r\n  const apiFunc = async (apiName, query, restPath, client) => {\r\n    let retVal;\r\n    const checkAttributes = (query, targets) => {\r\n      return targets.reduce((prev, target) => {\r\n        if (prev) return prev;\r\n        if (query[target] === undefined) return `Error: Attribute \"${target}\" is missing`;\r\n        return prev;\r\n      }, undefined);\r\n    };\r\n    try {\r\n      switch (apiName) {\r\n        case 'ping':\r\n          retVal = 'Implemented';\r\n          break;\r\n        case 'info':\r\n          retVal = checkAttributes(query, ['mapID']);\r\n          if (!retVal) {\r\n            const db = await getDB('Weiwudi', 'mapSetting', 'mapID');\r\n            const setting = await getItem(db, 'mapSetting', query.mapID);\r\n            if (!setting) retVal = `Error: MapID \"${query.mapID}\" not found`;\r\n            else {\r\n              retVal = new Response(JSON.stringify(setting), {\r\n                headers: new Headers({\r\n                  'content-type': 'application/json'\r\n                })\r\n              });\r\n            }\r\n          }\r\n          break;\r\n        case 'add':\r\n          const db = await getDB('Weiwudi', 'mapSetting', 'mapID');\r\n          retVal = checkAttributes(query, ['mapID','type', 'url']);\r\n          if (!retVal) {\r\n            query.tileSize = parseInt(query.tileSize || 256);\r\n            switch (query.type) {\r\n              case 'xyz':\r\n                retVal = checkAttributes(query, ['width', 'height']);\r\n                if (!retVal) {\r\n                  query.width = parseInt(query.width);\r\n                  query.height = parseInt(query.height);\r\n                  const calcZoom = (v) => { return Math.ceil(Math.log(v / query.tileSize) / Math.log(2)) };\r\n                  query.maxZoom = Math.max(calcZoom(query.width), calcZoom(query.height));\r\n                  query.minZoom = query.minZoom ? parseInt(query.minZoom) : 0;\r\n                  query.minX = 0;\r\n                  query.minY = 0;\r\n                  query.maxX = Math.ceil(query.width / query.tileSize) - 1;\r\n                  query.maxY = Math.ceil(query.height / query.tileSize) - 1;\r\n                }\r\n                break;\r\n              case 'wmts':\r\n                if (!retVal) {\r\n                  const lng2MercX = (lng) => { return 6378137 * lng * Math.PI / 180 };\r\n                  const lat2MercY = (lat) => { return 6378137 * Math.log(Math.tan(Math.PI / 360 * (90 + lat))) };\r\n                  if (query.maxZoom) query.maxZoom = parseInt(query.maxZoom);\r\n                  if (query.minZoom) query.minZoom = parseInt(query.minZoom);\r\n                  if (query.maxLng && query.minLng && query.maxLat && query.minLat) {\r\n                    query.maxLng = parseFloat(query.maxLng);\r\n                    query.minLng = parseFloat(query.minLng);\r\n                    query.maxLat = parseFloat(query.maxLat);\r\n                    query.minLat = parseFloat(query.minLat);\r\n                    const maxMercX = lng2MercX(query.maxLng);\r\n                    const minMercX = lng2MercX(query.minLng);\r\n                    const maxMercY = lat2MercY(query.maxLat);\r\n                    const minMercY = lat2MercY(query.minLat);\r\n                    query.minX = Math.floor((MERC_MAX + minMercX) / (2 * MERC_MAX) * Math.pow(2, query.maxZoom));\r\n                    query.maxX = Math.floor((MERC_MAX + maxMercX) / (2 * MERC_MAX) * Math.pow(2, query.maxZoom));\r\n                    query.minY = Math.floor((MERC_MAX - maxMercY) / (2 * MERC_MAX) * Math.pow(2, query.maxZoom));\r\n                    query.maxY = Math.floor((MERC_MAX - minMercY) / (2 * MERC_MAX) * Math.pow(2, query.maxZoom));\r\n                  }\r\n                }\r\n                break;\r\n              default:\r\n                retVal = 'Error: Unknown \"type\" value';\r\n            }\r\n          }\r\n          if (!retVal) {\r\n            if (!checkAttributes(query, ['maxX', 'minX', 'maxY', 'minY', 'minZoom', 'maxZoom'])) {\r\n              query.totalTile = 0;\r\n              const calcTileCoord = (atMaxZoom, zoom) => { return Math.floor(atMaxZoom / Math.pow(2, query.maxZoom - zoom)) };\r\n              for (let z = query.minZoom; z <= query.maxZoom; z++) {\r\n                const minX = calcTileCoord(query.minX, z);\r\n                const minY = calcTileCoord(query.minY, z);\r\n                const maxX = calcTileCoord(query.maxX, z);\r\n                const maxY = calcTileCoord(query.maxY, z);\r\n                query.totalTile += (maxX - minX + 1) * (maxY - minY + 1);\r\n              }\r\n            }\r\n            await putItem(db, 'mapSetting', query);\r\n            await getDB(`Weiwudi_${query.mapID}`, 'tileCache', 'z_x_y');\r\n            retVal = new Response(JSON.stringify(query), {\r\n              headers: new Headers({\r\n                'content-type': 'application/json'\r\n              })\r\n            });\r\n          }\r\n          break;\r\n        case 'clean':\r\n          retVal = checkAttributes(query, ['mapID']);\r\n          if (fetchAllBlocker && fetchAllBlocker.mapID == query.mapID) {\r\n            retVal = `Error: ${query.mapID} is under fetching process. Please cancel it first`;\r\n          } else if (!retVal) {\r\n            const cacheDB = await getDB(`Weiwudi_${query.mapID}`);\r\n            await cleanDB(cacheDB, 'tileCache');\r\n            retVal = `Cleaned: ${query.mapID}`;\r\n          }\r\n          break;\r\n        case 'delete':\r\n          retVal = checkAttributes(query, ['mapID']);\r\n          if (fetchAllBlocker && fetchAllBlocker.mapID == query.mapID) {\r\n            retVal = `Error: ${query.mapID} is under fetching process. Please cancel it first`;\r\n          } else if (!retVal) {\r\n            await deleteDB(`Weiwudi_${query.mapID}`);\r\n            const db = await getDB('Weiwudi');\r\n            await deleteItem(db, 'mapSetting', query.mapID);\r\n            retVal = `Deleted: ${query.mapID}`;\r\n          }\r\n          break;\r\n        case 'cancel':\r\n          retVal = checkAttributes(query, ['mapID']);\r\n          if (fetchAllBlocker && fetchAllBlocker.mapID == query.mapID) {\r\n            fetchAllBlocker.cancel = true;\r\n            retVal = `Fetching process of ${fetchAllBlocker.mapID} is canceled`;\r\n          } else {\r\n            retVal = `Error: There are no fetching process of ${query.mapID}`;\r\n          }\r\n        case 'stats':\r\n          retVal = checkAttributes(query, ['mapID']);\r\n          if (!retVal) {\r\n            const db = await getDB('Weiwudi');\r\n            const setting = await getItem(db, 'mapSetting', query.mapID);\r\n            if (!setting) retVal = `Error: MapID \"${query.mapID}\" not found`;\r\n            else {\r\n              const cacheDB = await getDB(`Weiwudi_${query.mapID}`);\r\n              const ret = await countDB(cacheDB, 'tileCache');\r\n              if (setting.totalTile) {\r\n                ret.total = setting.totalTile;\r\n                ret.percent = Math.floor(ret.count / ret.total * 100);\r\n              }\r\n              retVal = new Response(JSON.stringify(ret), {\r\n                headers: new Headers({\r\n                  'content-type': 'application/json'\r\n                })\r\n              });\r\n            }\r\n          }\r\n          break;\r\n        case 'cache':\r\n          const matched = restPath.match(/^([^\\/]+)\\/(\\d+)\\/(\\d+)\\/(\\d+)$/);\r\n          if (matched) {\r\n            retVal = await getImage(matched[1], parseInt(matched[2]), parseInt(matched[3]), parseInt(matched[4]));\r\n          } else {\r\n            retVal = 'Error: \"cache\" api needs mapID, zoom, x, y settings';\r\n          }\r\n          break;\r\n        case 'fetchAll':\r\n          retVal = checkAttributes(query, ['mapID']);\r\n          if (!retVal) {\r\n            const db = await getDB('Weiwudi');\r\n            const setting = await getItem(db, 'mapSetting', query.mapID);\r\n            if (!setting) retVal = `Error: MapID \"${query.mapID}\" not found`;\r\n            else if (!setting.totalTile) retVal = `Error: Map \"${query.mapID}\" cannot fetch all tiles`;\r\n            else if (fetchAllBlocker) {\r\n              retVal = `Error: Another fetching process is running: \"${fetchAllBlocker.mapID}\" (${fetchAllBlocker.count} / ${fetchAllBlocker.total})`;\r\n            } else {\r\n              setTimeout(() => {\r\n                fetchAllBlocker = {\r\n                  mapID: query.mapID,\r\n                  total: setting.totalTile,\r\n                  count: 0,\r\n                  error: 0\r\n                };\r\n                fetchAll(client, setting);\r\n              }, 1);\r\n              retVal = `Fetching task start: ${query.mapID}`;\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          retVal = `Error: API ${apiName} not found`;\r\n      }\r\n    } catch (e) {\r\n      retVal = `Error: ${e}`;\r\n    }\r\n\r\n    if (retVal) return retVal;\r\n  };\r\n\r\n  registerRoute(/^https?:\\/\\/weiwudi.example.com/, handlerCb, 'GET');\r\n}","import {registerRoute} from \"workbox-routing\";\r\nimport {Weiwudi_Internal} from \"./weiwudi_gw_logic\";\r\n\r\nWeiwudi_Internal(registerRoute);","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport './_version.js';\n/**\n * This method is deprecated, and will be removed in Workbox v7.\n *\n * Calling self.skipWaiting() is equivalent, and should be used instead.\n *\n * @memberof workbox-core\n */\nfunction skipWaiting() {\n    // Just call self.skipWaiting() directly.\n    // See https://github.com/GoogleChrome/workbox/issues/2525\n    if (process.env.NODE_ENV !== 'production') {\n        logger.warn(`skipWaiting() from workbox-core is no longer recommended ` +\n            `and will be removed in Workbox v7. Using self.skipWaiting() instead ` +\n            `is equivalent.`);\n    }\n    void self.skipWaiting();\n}\nexport { skipWaiting };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","/**\r\n * Welcome to your Workbox-powered service worker!\r\n *\r\n * You'll need to register this file in your web app and you should\r\n * disable HTTP caching for this file too.\r\n * See https://goo.gl/nhQhGp\r\n *\r\n * The rest of the code is auto-generated. Please don't update this file\r\n * directly; instead, make changes to your Workbox build configuration\r\n * and re-run your build process.\r\n * See https://goo.gl/2aRDsh\r\n */\n\nimport { skipWaiting, clientsClaim } from \"workbox-core\";\nimport { precacheAndRoute } from \"workbox-precaching\";\nimport { registerRoute } from \"workbox-routing\";\nimport { StaleWhileRevalidate } from \"workbox-strategies\";\nimport { ExpirationPlugin } from \"workbox-expiration\";\nimport \"weiwudi/src/weiwudi_gw\";\nskipWaiting();\nclientsClaim();\n\n/**\r\n * The workboxSW.precacheAndRoute() method efficiently caches and responds to\r\n * requests for URLs in the manifest.\r\n * See https://goo.gl/S9QRab\r\n */\nprecacheAndRoute(self.__WB_MANIFEST, {});\n// eslint-disable-next-line no-undef\nregisterRoute(/(?:maps\\/.+\\.json|pwa\\/.+|pois\\/.+\\.json|apps\\/.+\\.json|tmbs\\/.+\\.jpg|images\\/.+\\.(?:png|jpg))$/,\n// eslint-disable-next-line no-undef\nnew StaleWhileRevalidate({\n  cacheName: \"resourcesCache\",\n  plugins: [\n  // eslint-disable-next-line no-undef\n  new ExpirationPlugin({\n    maxAgeSeconds: 86400,\n    purgeOnQuotaError: false\n  })]\n}), \"GET\");","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n"],"names":["self","_","e","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","messageGenerator","code","args","msg","length","JSON","stringify","Error","constructor","errorCode","details","super","this","name","quotaErrorCallbacks","Set","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","userCacheName","stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","dontWaitFor","promise","then","Deferred","Promise","resolve","reject","getFriendlyURL","url","String","location","replace","RegExp","origin","waitUntil","event","asyncFn","returnPromise","async","copyResponse","response","modifier","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","body","testResponse","Response","error","canConstructResponseFromBodyStream","blob","createCacheKey","entry","urlObject","cacheKey","revision","cacheKeyURL","originalURL","set","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","cachedResponse","type","Request","push","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","params","_precacheController","getCacheKeyForURL","toRequest","input","StrategyHandler","strategy","options","_cacheKeys","Object","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","mode","FetchEvent","preloadResponse","possiblePreloadResponse","hasCallback","cb","iterateCallbacks","err","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetch","fetchOptions","callback","runCallbacks","responseClone","cachePut","key","matchOptions","effectiveRequest","getCacheKey","multiMatchOptions","caches","match","ms","setTimeout","responseToCache","_ensureResponseSafeToCache","cache","open","hasCacheUpdateCallback","oldResponse","strippedRequestURL","keysOptions","ignoreSearch","cacheKeys","keys","cacheMatchIgnoreParams","put","executeQuotaErrorCallbacks","newResponse","get","statefulCallback","statefulParam","shift","destroy","pluginsUsed","handle","responseDone","handleAll","handler","_getResponse","_awaitComplete","_handle","doneWaiting","waitUntilError","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","cacheMatch","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","index","entries","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","splice","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","addEventListener","urlsToWarnAbout","cacheMode","has","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","all","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","createHandlerBoundToURL","normalizeHandler","method","setCatchHandler","catchHandler","RegExpRoute","regExp","result","exec","slice","Router","_routes","_defaultHandlerMap","routes","addFetchListener","responsePromise","handleRequest","respondWith","addCacheListener","data","payload","requestPromises","urlsToCache","map","ports","postMessage","protocol","startsWith","sameOrigin","route","findMatchingRoute","_catchHandler","catch","catchErr","matchResult","Array","isArray","setDefaultHandler","registerRoute","unregisterRoute","routeIndex","indexOf","defaultRouter","capture","captureUrl","moduleName","funcName","paramName","PrecacheRoute","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","some","test","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","instanceOfAny","object","constructors","c","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","wrapFunction","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","success","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","oldTraps","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","CacheTimestampsModel","_db","_cacheName","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","blocked","indexedDB","deleteDatabase","oldVersion","deleteDB","timestamp","id","_getId","getDb","durability","minTimestamp","maxCount","cursor","openCursor","entriesToDelete","entriesNotDeletedCount","urlsDeleted","version","upgrade","blocking","terminated","openPromise","newVersion","openDB","CacheExpiration","config","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_matchOptions","_timestampModel","Date","now","urlsExpired","expireEntries","setTimestamp","getTimestamp","expireOlderThan","Infinity","MERC_MAX","dbCache","fetchAllBlocker","getDB","dbname","table","onupgradeneeded","onsuccess","onerror","getItem","dry","getReq","getKey","oncomplete","onabort","putItem","item","putReq","getImage","mapID","z","x","y","noOutput","outExtent","setting","minZoom","maxZoom","minXatZ","Math","floor","minX","pow","maxXatZ","maxX","minYatZ","minY","maxYatZ","maxY","b64Data","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","byteNumbers","i","charCodeAt","byteArray","Uint8Array","Blob","b64toBlob","cacheDB","cached","nowEpoch","getTime","epoch","template","extractTemplate","random","resp","ok","reduce","obj","fetchAll","client","processed","percent","allKeys","getAllKeys","allTasks","totalTile","log","subTasks","clients","cancel","promises","task","count","total","reason","apiFunc","apiName","query","restPath","retVal","checkAttributes","targets","prev","tileSize","parseInt","width","height","calcZoom","v","ceil","max","lng2MercX","lng","PI","lat2MercY","lat","tan","maxLng","minLng","maxLat","minLat","parseFloat","maxMercX","minMercX","maxMercY","minMercY","calcTileCoord","atMaxZoom","zoom","clearReq","clear","cleanDB","close","deleteReq","delReq","deleteItem","ret","cursorReq","size","countDB","matched","clientId","getAll","res","Weiwudi_Internal","skipWaiting","claim","__WB_MANIFEST","addRoute","p","unshift","fetchAndCachePromise","fetchAndCachePut","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","updateTimestamp","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","add","registerQuotaErrorCallback","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","headerTime","isNaN"],"sourceRoot":""}